{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAChCC,EAAiB,EAErBH,EAAKI,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBAKIC,EAAgBP,EAAKQ,SAASC,OAAOC,MAEvCC,EAAaC,aAAY,WAC3B,OAAIT,KAAoBI,GAoBnB,IAAIM,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAiBhB,EAAKQ,SAASS,MAAMP,MACrCQ,EAAclB,EAAKQ,SAASW,KAAKT,MAGvCO,EAAQD,EAAiBE,EAAcA,GADvCE,EAAWjB,EAAiB,GAG5B,IAAMkB,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFP,EAAQ,CAAEM,WAAUH,UAEpBF,EAAO,CAAEK,WAAUH,S,GAEpBA,E,IAhCEQ,MAAK,SAAAC,G,IAAGN,EAAQM,EAARN,SAAUH,EAAKS,EAALT,MACjBnB,EAAA6B,OAAOC,QAAQ,uBAAwCC,OAAfT,EAAS,QAAYS,OAANZ,EAAM,M,IAE9Da,OAAM,SAAAJ,G,IAAGN,EAAQM,EAARN,SAAUH,EAAKS,EAALT,MAClBnB,EAAA6B,OAAOI,QAAQ,sBAAqCF,OAAfT,EAAS,QAAYS,OAANZ,EAAM,M,SAG9Dd,GAAkB,KAGlB6B,cAAcrB,QACdR,EAAiB,IAMvB,IAAuBiB,EAAUH,C,GAH5B,GApBL,IACQV,EAEFI,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nlet promiseCounter = 0;\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  createPromises();\n}\n\nfunction createPromises() {\n  const amountInputEL = form.elements.amount.value;\n\n  let intervalId = setInterval(() => {\n    if (promiseCounter !== +amountInputEL) {\n      createPromise()\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n\n      promiseCounter += 1;\n      return;\n    } else {\n      clearInterval(intervalId);\n      promiseCounter = 0;\n      return;\n    }\n  }, 0);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const timeoutInputEl = form.elements.delay.value;\n    const stepInputEl = form.elements.step.value;\n\n    position = promiseCounter + 1;\n    delay = timeoutInputEl - stepInputEl + stepInputEl * position;\n\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$promiseCounter","addEventListener","e","preventDefault","amountInputEL","elements","amount","value","intervalId","setInterval","Promise","resolve","reject","timeoutInputEl","delay","stepInputEl","step","position","shouldResolve","Math","random","setTimeout","then","param","Notify","success","concat","catch","failure","clearInterval"],"version":3,"file":"03-promises.2e5a7f95.js.map"}